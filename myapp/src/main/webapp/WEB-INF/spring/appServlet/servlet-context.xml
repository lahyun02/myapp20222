<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
	
	<!-- 	화면출력, controller쪽 관련 설정하는 곳  -->
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- <resources mapping="/resources/**" location="/resources/" /> -->
	<!-- 스프링의 DispatcherServlet이 요청 경로에 맞는 핸들러를 찾지 못한 경우
	그 요청을 처리할 디폴트서블릿핸들러를 등록 
	(디폴트서블릿핸들러는 요청 처리를 서버(톰캣)의 DefaultServlet에게 위임)	-->
	<default-servlet-handler/>
	

	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- JSTL 메시지 관련 태그가 스프링의 메시지 소스를 사용하도록 지원해주는 JstlView 사용. InternalResourceView와 거의 같지만 jstl을 더 잘 지원해줌  -->
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2" /> 
	</beans:bean>
	<!-- 컨트롤러가 문자열(뷰이름)을 반환했을 때, TilesViewResolver가 먼저 뷰이름을 처리하고,  -->
	<!-- TilesViewResolver가 처리할 수 없는 경우 InternalResourceViewResolver가 처리하도록 order 속성을 설정  -->
	<!-- ViewResolver가 두개 등록되어있기 때문에 스프링이 처리할 순서를 설정 -->
	<!-- titles 버전이 3이라서 3버전의 클래스 등록 -->
	<beans:bean class="org.springframework.web.servlet.view.tiles3.TilesViewResolver">
		<beans:property name="order" value="1" /> 
	</beans:bean>
	<!-- Tiles 설정 정보 등록 (설정 파일 위치 지정) -->
	<beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
	   <beans:property name="definitions">
	     <beans:list>
	       <beans:value>/WEB-INF/views/tiles/tiles.xml</beans:value>
			<!-- 해당파일: 사용자에서 보여줄 화면을 어떻게 정의하는지 설정. webapp아래쪽이면 위치는 상관x. 클래스패스접두어만 붙이면 resources에 붙여도 상관x -->
	     </beans:list>
	   </beans:property>
	 </beans:bean>
	
	
	<!-- Controller를 포함해 약속된 애노테이션이 있는 클래스를 등록하는 곳 : 베이스패키지 아래면 ok -->
	<context:component-scan base-package="com.exam.myapp" />
	
	<!-- MessageSource 객체를 "messageSource"라는 이름으로 스프링에 등록하면, 해당 MessageSource 객체의 메시지들이 스프링에 등록되어 사용 가능 -->
	<beans:bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<!-- 클래스패스 기준으로 메시지를 정의한 프로퍼티파일의 경로를 확장자(.properties) 제외하고 지정 - MessageSource객체가 담고 있는 내용 확인 가능 -->
		<!-- messages_en.properties, messages_ko.properties 처럼 국가 및 언어 코드를 접미어로 붙인 파일들을 사용하면,  -->
		<!-- 로케일에 따라서 다른 언어의 메시지들이 자동으로 사용되도록 설정 가능 (국제화) -->
		<beans:property name="basename" value="messages" />
	</beans:bean>
	
	<interceptors>
		<interceptor>
			<mapping path="/**"/> <!-- 모든 경로의 요청에 대해 LoginInterceptor가 실행하도록. 슬래쉬/가 붙어도 다 갈 수 있도록 (/*/*/*)  -->
			<!-- 로그인 안한 상태에서도 로그인과 회원가입 화면에 접근할 수 있도록 제외할 경로 추가하기  -->
			<exclude-mapping path="/member/login.do"/>
			<exclude-mapping path="/member/add.do"/>
			<exclude-mapping path="/member/duplicate.do"/> <!-- 아이디 중복확인도 제외경로에 추가 -->
			<beans:bean class="com.exam.myapp.member.LoginInterceptor" />
			
		</interceptor>
	</interceptors>
	
	<!-- 이름이 중요 - multipartResolver라고 해야 스프링이 이 이름으로 등록된 객체를 찾아서 multipart data를 처리할 수 있음 -->
	<!-- 파일이 포함된 폼 데이터 처리를 담당하는 객체를 multipartResolver 라는 이름으로 등록 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"> 
		
	</beans:bean>
	
	
</beans:beans>
